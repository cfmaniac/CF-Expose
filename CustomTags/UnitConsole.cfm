<cfSilent>	<cfif thisTag.executionMode EQ "end"><cfExit /></cfif>	<cfParam name="attributes.returnObjectName"				type="string"	default="UnitConsole" />	<cfParam name="attributes.mediaUrlAddress"				type="string"	default="" />	<cfParam name="attributes.isWindowMode"					type="boolean"	default="1" />	<cfParam name="attributes.RemoteProcessorUrlAddress"	type="string"	default="" />	<cfParam name="attributes.SampleDumpUrlAddress"			type="any"		default="" />	<cfParam name="attributes.initDumpVarName"				type="string"	default="" />	<cfParam name="attributes.isInitWindowVisible"			type="boolean"	default="no" />	<cfif !len(attributes.mediaUrlAddress) >		<cfset structDelete(attributes, "mediaUrlAddress") />	</cfif>	<!--- REMOTE PROCESSING --->		<cfScript>			if( isDefined('isCFUnitConsoleRequest') OR isDefined('CFUnitConsoleJSON') OR isDefined('sampleDumpTypeName') )			{				CFMethods = createObject("component", "CFExpose.CFMethods");				clientInput = duplicate(url);				structAppend(clientInput, duplicate(form));				local.Processor = createObject("component", "CFExpose.CFUnitConsole.Processor").setIncludeVariableStruct(caller);				if(structKeyExists(clientInput, "sampleDumpTypeName"))					returnVariable = local.Processor.sampleDump(argumentCollection=clientInput);				else if (structKeyExists(clientInput, "method") AND clientInput.method EQ "getArgumentParameterForm")					returnVariable = local.Processor.getArgumentParameterForm(argumentCollection=clientInput);				else					returnVariable = local.Processor.jsonToDumpObject(argumentCollection=clientInput);				createObject("component", "CFExpose.CFMethods").cfSetting(showDebugOutput=0);				createObject("component", "CFExpose.ExposeColdFusion").clearAllOutput();				CFMethods.HtmlHead(returnVariable);				CFMethods.abort();			}		</cfScript>	<!--- END : Remote Processing --->	<!--- Server-side setup --->		<cfScript>			/* get caller info */				callerContext = getMetaData(caller).getDeclaredField("pageContext");				callerContext.setAccessible(true);				callerPageContext = callerContext.get(caller);				callerTemplatePath = callerPageContext.getPage().getCurrentTemplatePath();				callerLineNumber = callerPageContext.getCurrentLineNo();			/* end : get caller info */			//convert initDumpVarName into caller variable			if(len(attributes.initDumpVarName))			{				attributes.InitDumpVarLabel = attributes.initDumpVarName;				attributes.initDumpVar = caller[attributes.initDumpVarName];			}else if(structKeyExists(attributes, "var"))				attributes.initDumpVar = attributes.var;			if(attributes.isWindowMode)				attributes.windowTitle = 'Console for Template /#listLast(callerTemplatePath,'/\')#:#callerLineNumber#';			if(!structKeyExists(attributes, "RemoteProcessorUrlAddress"))				attributes.RemoteProcessorUrlAddress='';			local.CFUC = createObject("component", "CFExpose.CFUnitConsole.CFUnitConsole").init(argumentCollection=attributes);			/* add default variables */				local.keyNameArray = listToArray(listSort(structKeyList(caller), "textnocase", "asc"));				for(local.keyIndex=1; local.keyIndex LTE arrayLen(local.keyNameArray); local.keyIndex=local.keyIndex+1)				{					local.name = local.keyNameArray[local.keyIndex];					local.CFUC.setDefaultVariable(local.name, caller[local.name]);				}			/* end */			returnVariable = local.CFUC.getOutput();			caller[attributes.returnObjectName] = local.CFUC;		</cfScript>		<cfif structKeyExists( attributes , "returnVariable" ) >			<cfParam name="attributes.returnVariable" type="variableName" />			<cfset "caller.#attributes.returnVariable#" = returnVariable />			<cfExit />		</cfif>	<!--- end ---></cfSilent><cfOutput>#returnVariable#</cfOutput><cfif isDefined('isCFUnitConsoleRequest') ><cfAbort /></cfif>