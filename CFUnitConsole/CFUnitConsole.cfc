<cfComponent	Hint	= ""	Output	= "no"	Extends	= "CFExpose.RequestKit.CFExposeClientSideClass">	<cfset variables.defaultVariableArray = arrayNew(1) />	<cfFunction		name		= "init"		returnType	= "CFUnitConsole"		access		= "public"		output		= "no"		description	= ""		hint		= ""	>		<cfArgument name="isWindowMode"					required="no"	type="boolean"	hint="" />		<cfArgument name="isInitWindowVisible"			required="no"	type="boolean"	hint="" />		<cfArgument name="windowTitle"					required="no"	type="string"	hint="" />		<cfArgument name="isDebug"						required="no"	type="boolean"	hint="" />		<cfArgument name="remoteProcessorUrlAddress"	required="no"	type="string"	hint="" />		<cfArgument name="mediaUrlAddress"				required="no"	type="string"	hint="" />		<cfArgument name="sampleDumpUrlAddress"			required="no"	type="string"	hint="" />		<cfArgument name="initDumpVar"					required="no"	type="any"		hint="" />		<cfArgument name="InitDumpVarLabel"				required="no"	type="string"	hint="" />		<cfScript>			/* window based methods */				if((structKeyExists(arguments, "isWindowMode") AND arguments.isWindowMode))					setWindow();				if(structKeyExists(arguments, "windowTitle") AND (Not structKeyExists(arguments, "isWindowMode") OR arguments.isWindowMode))					setWindow(title=arguments.windowTitle);				if(structKeyExists(arguments, "isInitWindowVisible") AND (Not structKeyExists(arguments, "isWindowMode") OR arguments.isWindowMode))					setWindow(initShow=arguments.isInitWindowVisible);			/* end */			return super.init(argumentCollection=arguments);		</cfScript>	</cfFunction>	<cfFunction		name		= "setDefaultVariable"		returnType	= "CFUnitConsole"		access		= "public"		output		= "no"		hint		= "appends to the default options that will be output in the variable panel"		description	= ""	>		<cfArgument name="name"		required="yes"	type="variableName"	hint="" />		<cfArgument name="value"	required="no"	type="any"			hint="only used to detect type" />		<cfScript>			var local = structNew();			local.tagInvokeCollection = structNew();			local.tagInvokeCollection.tagName = 'a';			local.tagInvokeCollection.attributeStruct = structNew();			local.tagInvokeCollection.tagBody = arguments.name;			if(structKeyExists(arguments, "value"))				local.tagInvokeCollection.attributeStruct.type = CFMethods().getVariableTypeName(arguments.value);			else				local.tagInvokeCollection.attributeStruct.type = '';			if(local.tagInvokeCollection.attributeStruct.type eq 'function')//?base the css class by function return			{				local.metaData = getMetaData(arguments.value);				local.tagInvokeCollection.attributeStruct.parameters = serializeJson(local.metaData.parameters);				if(CFMethods().isMethodReturnComponent(arguments.value))					local.tagInvokeCollection.attributeStruct.type = 'component';				else if(structKeyExists(local.metaData, "returntype"))					local.tagInvokeCollection.attributeStruct.type = local.metaData.returnType;				local.tagInvokeCollection.tagBody = local.metaData.name;			}			local.tagInvokeCollection.attributeStruct.class = 'selectable ' & local.tagInvokeCollection.attributeStruct.type;			local.tagInvokeCollection.attributeStruct.nodesyntax = arguments.name;			arguments.htmlOutputString = CFMethods().Conversions().structToTagString(argumentCollection=local.tagInvokeCollection);			arrayAppend(variables.defaultVariableArray, arguments);			return this;		</cfScript>	</cfFunction>	<cfFunction		name		= "getDefaultVariableArray"		returnType	= "array"		access		= "public"		output		= "no"		hint		= ""		description	= ""	>		<cfReturn variables.defaultVariableArray />	</cfFunction>	<cfFunction		name		= "setInitDumpVarLabel"		returnType	= "any"		access		= "public"		output		= "no"		description	= ""		hint		= ""	>		<cfArgument name="InitDumpVarLabel" required="yes" type="string" hint="" />		<cfset variables.InitDumpVarLabel = arguments.InitDumpVarLabel />		<cfReturn this />	</cfFunction>	<cfFunction		name		= "getInitDumpVarLabel"		returnType	= "string"		access		= "public"		output		= "no"		description	= ""		hint		= ""	>		<cfif NOT structKeyExists(variables, "InitDumpVarLabel")>			<cfReturn 'Request Initial Dump Variable' />		</cfif>		<cfReturn variables.InitDumpVarLabel />	</cfFunction>	<cfFunction		name		= "setInitDumpVar"		returnType	= "any"		access		= "public"		output		= "no"		description	= ""		hint		= ""	>		<cfArgument name="InitDumpVar" required="yes" type="any" hint="" />		<cfset variables.InitDumpVar = arguments.InitDumpVar />		<cfReturn this />	</cfFunction>	<cfFunction		name		= "getInitDumpVar"		returnType	= "any"		access		= "public"		output		= "no"		description	= ""		hint		= ""	>		<cfif structKeyExists(variables, "InitDumpVar")>		<cfReturn variables.InitDumpVar />		</cfif>	</cfFunction>	<cfFunction		name		= "getClientFileLoader"		returnType	= "CFExpose.RequestKit.ClientFileLoader"		access		= "public"		output		= "no"		description	= ""		hint		= "returns the same instance after first call"	>		<cfif NOT structKeyExists(variables, "ClientFileLoader") >			<cfAjaxImport tags="CFLAYOUT-BORDER" />			<cfset local.Media = new CFExpose.Media() />			<cfset variables.ClientFileLoader = new CFExpose.RequestKit.ClientFileLoader(UrlAddress=local.Media) />		</cfif>		<cfReturn variables.ClientFileLoader />	</cfFunction>	<cfFunction		name		= "getOutput"		returnType	= "string"		access		= "public"		output		= "no"		description	= ""		hint		= ""	>		<cfScript>			var local = structNew();			local.jsClassName = getJsClassName();			local.ClientFileLoader = getClientFileLoader();			local.ClientFileLoader			.addScript(script='https://ajax.googleapis.com/ajax/libs/jquery/1.6.3/jquery.min.js', failOverList='jquery/1.6.1/jquery.min.js', jsTestCondition='typeof(jQuery)=="undefined"')			.addScript(script='https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js', failOverList='jquery/ui/1.8.16/jquery-ui.min.js')			.addScript('CFUnitConsole/CFUnitConsole.css')			.addScript('CFUnitConsole/CFUnitConsole.js','#getJsClassName()#_CFUnitConsole_load')			.setOnloadCompleteCallback('#local.jsClassName#_CFUnitConsole_load');			local.isDebugMode = isDebug();			if(local.isDebugMode)				local.ClientFileLoader.isDebug(1);		</cfScript>		<cfSaveContent Variable="local.returnVariable">			<cfOutput>				<!--- just to ensure the cfdump CSS is always available --->					<div style="display:none" id="#local.jsClassName#_CFUnitConsoleWrap"><cfDump var="#structNew()#" label="" expand="yes"></div>				<!--- end --->				<cfInclude template="Layouts/Skin.cfm" />				<!--- Ajax n JS setup --->					<cfAjaxImport tags="cfWindow" />					<script type="text/javascript" language="Javascript">						#local.jsClassName#_CFUnitConsole_load = function()						{							var CFUnitConsoleClass = new CFUnitConsole();							<cfif local.isDebugMode >								CFUnitConsoleClass.isDebug(1);							</cfif>							<!--- processor urls --->								CFUnitConsoleClass.setDumpUrl(#serializeJson(getRemoteProcessorUrlAddress().getString())#);								CFUnitConsoleClass.setSampleDumpUrl(#serializeJson(getSampleDumpUrlAddress().getString())#);								CFUnitConsoleClass.setArgumentParameterFormUrl(#serializeJson(getArgumentParameterFormUrl().getString())#)							<!--- end --->							CFUnitConsoleClass.autoConfigContainerElementById('#local.jsClassName#Wrap');							CFUnitConsoleClass.setBorderLayoutName('ucLayout')							<cfif local.isDebugMode >								CFUnitConsoleClass.log('Server Hand-off Completed');							</cfif>							#local.jsClassName# = CFUnitConsoleClass;						}					</script>				<!--- end --->			</cfOutput>			<!--- <cfDump var="#attributes#" label="" expand="yes"> --->		</cfSaveContent>		<cfif structKeyExists(variables, "window") >			<cfSaveContent Variable="local.returnVariable">				<cfif NOT variables.window.initShow >					<cfOutput>						<button type="button" onclick="var Win=ColdFusion.Window.getWindowObject('#variables.window.name#');Win.isVisible()?ColdFusion.Window.hide('#variables.window.name#'):ColdFusion.Window.show('#variables.window.name#');">&bull;&bull;</button>					</cfOutput>				</cfif>				<cfWindow					name		= "#variables.window.name#"					title		= "#variables.window.title#"					modal		= "no"					center		= "yes"					closable	= "true"					draggable	= "true"					initShow	= "#variables.window.initShow#"					resizable	= "true"					bodystyle	= "padding:0px;margin:0px;overflow:hidden"					width		= "800"					height		= "480"					minWidth	= "640"					minHeight	= "380"				>				</cfWindow>				<div style="visibility:hidden;position:absolute;">					<div class="CFFullSizeLayout" id="CFWindowTempContainer"><cfOutput>#local.returnVariable#</cfOutput></div>				</div>				<cfOutput>					<script type="text/javascript" language="Javascript">						onWindowConsoleLoad_#local.jsClassName#=function()						{							#local.jsClassName#.setCfWindowName('#variables.window.name#');							<cfif local.isDebugMode >								console.log('CFUnitConsole Window Loaded');							</cfif>						}					</script>					<style>						.CFFullSizeLayout {height:100%}						.CFFullSizeLayout .x-border-layout-ct {border-width:0px}					</style>				</cfOutput>			</cfSaveContent>			<cfset local.ClientFileLoader.setOnloadCompleteCallback('onWindowConsoleLoad_#local.jsClassName#') />		</cfif>		<cfset local.returnVariable = local.returnVariable & getClientFileLoader().getOutput() />		<cfReturn local.returnVariable />	</cfFunction>	<cfFunction		name		= "getWindowName"		returnType	= "variableName"		access		= "public"		output		= "no"		description	= ""		hint		= ""	>		<cfif structKeyExists(variables, "window") >			<cfReturn variables.window.name />		</cfif>		<cfReturn 'CFUnitConsoleWindow_#getJsClassName()#' />	</cfFunction>	<cfFunction		name		= "setWindow"		returnType	= "CFUnitConsole"		access		= "public"		output		= "no"		description	= ""		hint		= ""	>		<cfArgument name="name"		required="no"	type="variableName"	hint="" />		<cfArgument name="title"	required="no"	type="string"		hint="" />		<cfArgument name="initShow"	required="no"	type="boolean"		hint="" />		<cfScript>			if(!structKeyExists(variables, "window"))			{				local.name = getWindowName();				variables.window = {title='CF Unit Console', name=local.name, initShow=1};			}			CFMethods().structDeleteNulls(arguments);			structAppend(variables.window, arguments);			return this;		</cfScript>	</cfFunction>	<!--- URL Methods --->		<cfFunction			name		= "getRemoteProcessorUrlAddress"			returnType	= "CFExpose.RequestKit.UrlAddress"			access		= "public"			output		= "no"			description	= ""			hint		= ""		>			<cfScript>				if( NOT structKeyExists(variables, "RemoteProcessorUrlAddress") )				{					variables.RemoteProcessorUrlAddress = new('CFExpose.RequestKit.UrlAddress');					variables.RemoteProcessorUrlAddress.setFileName('RemoteProcessor.cfc?method=jsonToDumpObject');				}				return variables.RemoteProcessorUrlAddress;			</cfScript>		</cfFunction>		<cfFunction			name		= "setRemoteProcessorUrlAddress"			returnType	= "any"			access		= "public"			output		= "no"			hint		= ""			description	= ""		>			<cfArgument name="url" required="yes" type="any" hint="string or cfexpose.requestkit.urladdress" />			<cfScript>				if(isSimpleValue(arguments.url))					arguments.url = new('CFExpose.RequestKit.UrlAddress').init(arguments.url);				variables.RemoteProcessorUrlAddress = arguments.Url;				return this;			</cfScript>		</cfFunction>		<cfFunction			name		= "getSampleDumpUrlAddress"			returnType	= "CFExpose.RequestKit.UrlAddress"			access		= "public"			output		= "no"			description	= ""			hint		= ""		>			<cfif not structKeyExists(variables, "sampleDumpUrl") >				<cfset variables.sampleDumpUrl = "#getRemoteProcessorUrlAddress().setVar('method','sampleDump')#" />			</cfif>			<cfReturn variables.sampleDumpUrl />		</cfFunction>		<cfFunction			name		= "setSampleDumpUrlAddress"			returnType	= "CFUnitConsole"			access		= "public"			output		= "no"			description	= ""			hint		= ""		>			<cfArgument name="url" required="yes" type="any" hint="" />			<cfScript>				variables.sampleDumpUrl = createObject("component", "CFExpose.RequestKit.UrlAddress");				variables.sampleDumpUrl.setBaseHref(arguments.url);				return this;			</cfScript>		</cfFunction>		<cfFunction			name		= "getArgumentParameterFormUrl"			returnType	= "CFExpose.RequestKit.UrlAddress"			access		= "public"			output		= "no"			description	= ""			hint		= ""		>			<cfif not structKeyExists(variables, "argumentParameterFormUrl") >				<cfset variables.argumentParameterFormUrl = getRemoteProcessorUrlAddress().setVar('method','getArgumentParameterForm') />			</cfif>			<cfReturn variables.argumentParameterFormUrl />		</cfFunction>		<cfFunction			name		= "setArgumentParameterFormUrl"			returnType	= "CFUnitConsole"			access		= "public"			output		= "no"			description	= ""			hint		= ""		>			<cfArgument name="UrlAddress" required="yes" type="any" hint="string" />			<cfScript>				if(isSimpleValue(arguments.UrlAddress))					arguments.UrlAddress = createObject("component", "CFExpose.RequestKit.UrlAddress").init(arguments.UrlAddress);				variables.argumentParameterFormUrl = arguments.UrlAddress;				return this;			</cfScript>		</cfFunction>	<!--- END : URL METHODS ---></cfComponent>